% File: eval.pl
% Authors: mdeshp10, scheru20, and smungole
% Date: April 28, 2023
% Version: 1.0
% Description: This Prolog program contains predicates for the SAANP Language. It evaluates the parse tree generated by the parser.

% Setting up the environment
% env_lookup(KEY, ENV, VAL)
env_lookup(K, [(K, V)|_], V).
env_lookup(K, [(K1, _)|T], V) :- K \= K1, env_lookup(K, T, V).
env_lookup(K, [], _) :- write('"'), write(K), write('" not declared.'), fail.

% env_update(KEY, VAL, ENV, UENV)
env_update(K, V, [], [(K, V)]).
env_update(K, V, [(K, _)|T], [(K, V)|T]).
env_update(K, V, [(K1, V1)|T], [(K1, V1)|ENV]) :- K \= K1, env_update(K, V, T, ENV).

% EVALUATE PROGRAM
eval_prog(program(BLK), ENV, NENV) :- eval_blk(BLK, ENV, NENV).

% EVALUATE BLOCK
eval_blk(DEC, ENV, NENV) :- eval_dec(DEC, ENV, NENV).
eval_blk(IFE, ENV, NENV) :- eval_ife(IFE, ENV, NENV).
eval_blk(FOR, ENV, NENV) :- eval_for(FOR, ENV, NENV).
eval_blk(WHILE, ENV, NENV) :- eval_while(WHILE, ENV, NENV).
eval_blk(PRINT, ENV, NENV) :- eval_print(PRINT, ENV, NENV).

/* EVALUATE DECLARATION
?- eval_dec(assign(variable(z), =, ternary(compare(variable(x), ==, string('Hello, W0rld!')), ?, number(3), :, number(-, 3)), '.'), [(x, 'Hello')], ENV).
ENV = [(x, 'Hello'), (z, -3)] .
?- eval_dec(assign(variable(z), =, ternary(compare(variable(x), ==, string('Hello, W0rld!')), ?, number(3), :, number(-, 3)), '.'), [(x, 'Hello, W0rld!')], ENV).
ENV = [(x, 'Hello, W0rld!'), (z, 3)] .
?- eval_dec(assign(variable(z), =, compare(arithmetic(variable(x), *, parentheses('(', arithmetic(number(3), +, variable(y)), ')')), ==, number(0)), '.'), [(x, 10), (y, -3)], ENV).
ENV = [(x, 10), (y, -3), (z, true)] .
?- eval_dec(assign(variable(z), =, arithmetic(variable(x), *, parentheses('(', arithmetic(variable(z), +, number(-, 3)), ')')), '.'), [(x, 10), (z, 3)], ENV).
ENV = [(x, 10), (z, 0)] .
*/
eval_dec(assign(ID, =, TER, '.', BLK), ENV, NENV) :-
    eval_id(ID, VAR),
    eval_ter(TER, VAL, ENV),
    env_update(VAR, VAL, ENV, UENV),
    eval_blk(BLK, UENV, NENV).
eval_dec(assign(ID, =, TER, '.'), ENV, NENV) :-
    eval_id(ID, VAR),
    eval_ter(TER, VAL, ENV),
    env_update(VAR, VAL, ENV, NENV).

eval_dec(assign(ID, =, LOG, '.', BLK), ENV, NENV) :-
    eval_id(ID, VAR),
    eval_log(LOG, VAL, ENV),
    env_update(VAR, VAL, ENV, UENV),
    eval_blk(BLK, UENV, NENV).
eval_dec(assign(ID, =, LOG, '.'), ENV, NENV) :-
    eval_id(ID, VAR),
    eval_log(LOG, VAL, ENV),
    env_update(VAR, VAL, ENV, NENV).

eval_dec(assign(ID, =, EXP, '.', BLK), ENV, NENV) :-
    eval_id(ID, VAR),
    eval_exp(EXP, VAL, ENV),
    env_update(VAR, VAL, ENV, UENV),
    eval_blk(BLK, UENV, NENV).
eval_dec(assign(ID, =, EXP, '.'), ENV, NENV) :-
    eval_id(ID, VAR),
    eval_exp(EXP, VAL, ENV),
    env_update(VAR, VAL, ENV, NENV).

/* IF-ELSE BLOCK
?- eval_ife(condition(if, bool('True'), :, assign(variable(x), =, number(-, 3), '.'), endif), [], ENV).
ENV = [(x, -3)] .
?- eval_ife(condition(if, bool('False'), :, assign(variable(x), =, number(-, 3), '.'), endif), [], ENV).
ENV = [] .
?- eval_ife(condition(if, bool('True'), :, assign(variable(x), =, number(-, 3), '.', print(variable(x))), endif), [], ENV).
-3
ENV = [(x, -3)] .
?- eval_ife(condition(if, bool('False'), :, assign(variable(x), =, number(-, 3), '.', print(variable(x))), endif), [], ENV).
ENV = [] .
?- eval_ife(condition(if, bool('True'), :, assign(variable(x), =, number(-, 3), '.'), endif, print(variable(x))), [], ENV).
-3
ENV = [(x, -3)] .
?- eval_ife(condition(if, bool('False'), :, assign(variable(x), =, number(-, 3), '.'), endif, print(variable(x))), [], ENV).
"x" not declared.
false.

?- eval_ife(condition(if, bool('True'), :, assign(variable(x), =, number(-, 3), '.'), else, :, assign(variable(x), =, number(3), '.'), endif), [], ENV).
ENV = [(x, -3)] .
?- eval_ife(condition(if, bool('False'), :, assign(variable(x), =, number(-, 3), '.'), else, :, assign(variable(x), =, number(3), '.'), endif), [], ENV).
ENV = [(x, 3)] .
?- eval_ife(condition(if, bool('True'), :, assign(variable(x), =, number(-, 3), '.'), else, :, assign(variable(x), =, number(3), '.'), endif, print(variable(x))), [], ENV).
-3
ENV = [(x, -3)] .
?- eval_ife(condition(if, bool('False'), :, assign(variable(x), =, number(-, 3), '.'), else, :, assign(variable(x), =, number(3), '.'), endif, print(variable(x))), [], ENV).
3
ENV = [(x, 3)] .
*/
eval_ife(condition(if, LOG, :, BLK1, endif, BLK2), ENV, NENV) :-
    eval_log(LOG, true, ENV),
    eval_blk(BLK1, ENV, UENV),
    eval_blk(BLK2, UENV, NENV).
eval_ife(condition(if, LOG, :, _, endif, BLK2), ENV, NENV) :-
    eval_log(LOG, false, ENV),
    eval_blk(BLK2, ENV, NENV).
eval_ife(condition(if, LOG, :, BLK1, endif), ENV, NENV) :-
    eval_log(LOG, true, ENV),
    eval_blk(BLK1, ENV, NENV).
eval_ife(condition(if, LOG, :, _, endif), ENV, ENV) :-
    eval_log(LOG, false, ENV).

eval_ife(condition(if, LOG, :, BLK1, else, :, _, endif, BLK3), ENV, NENV) :-
    eval_log(LOG, true, ENV),
    eval_blk(BLK1, ENV, UENV),
    eval_blk(BLK3, UENV, NENV).
eval_ife(condition(if, LOG, :, _, else, :, BLK2, endif, BLK3), ENV, NENV) :-
    eval_log(LOG, false, ENV),
    eval_blk(BLK2, ENV, UENV),
    eval_blk(BLK3, UENV, NENV).
eval_ife(condition(if, LOG, :, BLK1, else, :, _, endif), ENV, NENV) :-
    eval_log(LOG, true, ENV),
    eval_blk(BLK1, ENV, NENV).
eval_ife(condition(if, LOG, :, _, else, :, BLK2, endif), ENV, NENV) :-
    eval_log(LOG, false, ENV),
    eval_blk(BLK2, ENV, NENV).

/* EVALUATE TRADITIONAL FOR-LOOP
?- eval_for(loop(for, variable(i), =, number(0), ',', compare(variable(i), <, number(10)), ',', increment(variable(i), =, arithmetic(variable(i), +, number(1))), :, print(variable(i)), endfor), [], ENV).
0
1
2
3
4
5
6
7
8
9
ENV = [(i, 10)] .
?- eval_for(loop(for, variable(i), =, number(0), ',', compare(variable(i), <, number(10)), ',', increment(variable(i), =, arithmetic(variable(i), +, number(1))), :, print(variable(i)), endfor, print(variable(i))), [], ENV).
0
1
2
3
4
5
6
7
8
9
10
ENV = [(i, 10)] .
*/
eval_for(loop(for, ID, =, NUM, ',', LOG, ',', INC, :, BLK1, endfor, BLK2), ENV, NENV) :-
    eval_id(ID, VAR),
    eval_num(NUM, VAL),
    env_update(VAR, VAL, ENV, UENV1),
    eval_for_block(LOG, INC, BLK1, UENV1, UENV2),
    eval_blk(BLK2, UENV2, NENV).
eval_for(loop(for, ID, =, NUM, ',', LOG, ',', INC, :, BLK1, endfor), ENV, NENV) :-
    eval_id(ID, VAR),
    eval_num(NUM, VAL),
    env_update(VAR, VAL, ENV, UENV),
    eval_for_block(LOG, INC, BLK1, UENV, NENV).

eval_for_block(LOG, INC, BLK, ENV, NENV) :-
    eval_log(LOG, true, ENV),
    eval_blk(BLK, ENV, UENV1),
    eval_inc(INC, UENV1, UENV2),
    eval_for_block(LOG, INC, BLK, UENV2, NENV).

eval_for_block(LOG, _, _, ENV, ENV) :- eval_log(LOG, false, ENV).

eval_inc(increment(ID, =, EXP), ENV, NENV) :-
    eval_id(ID, VAR),
    eval_exp(EXP, VAL, ENV),
    env_update(VAR, VAL, ENV, NENV).

/* EVALUATE WHILE LOOP
?- eval_while(loop(while, compare(variable(i), <, number(10)), :, print(variable(i), assign(variable(i), =, arithmetic(variable(i), +, number(1)), '.')), endwhile), [(i, 0)], ENV).
0
1
2
3
4
5
6
7
8
9
ENV = [(i, 10)] .
?- eval_while(loop(while, compare(variable(i), <, number(10)), :, print(variable(i), assign(variable(i), =, arithmetic(variable(i), +, number(1)), '.')), endwhile, print(variable(i))), [(i, 0)], ENV).
0
1
2
3
4
5
6
7
8
9
10
ENV = [(i, 10)] .
*/
eval_while(loop(while, LOG, :, BLK1, endwhile, BLK2), ENV, NENV) :-
    eval_while(loop(while, LOG, :, BLK1, endwhile), ENV, UENV),
    eval_blk(BLK2, UENV, NENV).

eval_while(loop(while, LOG, :, BLK1, endwhile), ENV, NENV) :-
    eval_log(LOG, true, ENV),
    eval_blk(BLK1, ENV, UENV),
    eval_while(loop(while, LOG, :, BLK1, endwhile), UENV, NENV).

eval_while(loop(while, LOG, :, _, endwhile), ENV, ENV) :- eval_log(LOG, false, ENV).

/* EVALUATE PRINT STATEMENT
?- eval_print(print(variable(saanp)), [(saanp, 'hiss')], ENV).
hiss
ENV = [(saanp, hiss)] .
?- eval_print(print(variable(saanp), print(variable(hiss))), [(saanp, 'hiss'), (hiss, 'saanp')], ENV).
hiss
saanp
ENV = [(saanp, hiss), (hiss, saanp)] .
?- eval_print(print(string('Hello, W0rld!')), [], ENV).
Hello, W0rld!
ENV = [] .
?- eval_print(print(number(-, 69)), [], ENV).
-69
ENV = [] .
?- eval_print(print(bool('True')), [], ENV).
true
ENV = [].
?- eval_print(print(bool('True'), print(number(-, 69))), [], ENV).
true
-69
ENV = [] .
*/
eval_print(print(ID, BLK), ENV, NENV) :-
    eval_id(ID, VAR),
    env_lookup(VAR, ENV, VAL),
    write(VAL), nl,
    eval_blk(BLK, ENV, NENV).
eval_print(print(ID), ENV, ENV) :-
    eval_id(ID, VAR),
    env_lookup(VAR, ENV, VAL),
    write(VAL), nl.

eval_print(print(NUM, BLK), ENV, NENV) :-
    eval_num(NUM, VAL),
    write(VAL), nl,
    eval_blk(BLK, ENV, NENV).
eval_print(print(NUM), ENV, ENV) :-
    eval_num(NUM, VAL),
    write(VAL), nl.

eval_print(print(STR, BLK), ENV, NENV) :-
    eval_str(STR, VAL),
    write(VAL), nl,
    eval_blk(BLK, ENV, NENV).
eval_print(print(STR), ENV, ENV) :-
    eval_str(STR, VAL),
    write(VAL), nl.

eval_print(print(BOOL, BLK), ENV, NENV) :-
    eval_bool(BOOL, VAL),
    write(VAL), nl,
    eval_blk(BLK, ENV, NENV).
eval_print(print(BOOL), ENV, ENV) :-
    eval_bool(BOOL, VAL),
    write(VAL), nl.

/* EVALUATE TERNARY EXPRESSION
?- eval_ter(ternary(compare(variable(x), ==, string('Hello, W0rld!')), ?, number(3), :, number(-, 3)), R, [(x, 'Hello, W0rld!')]).
R = 3 .
?- eval_ter(ternary(compare(variable(x), ==, string('Hello, W0rld!')), ?, number(3), :, number(-, 3)), R, [(x, 'Hello')]).
R = -3 .
*/
eval_ter(ternary(LOG, ?, EXP1, :, _), VAL, ENV) :-
    eval_log(LOG, true, ENV),
    eval_exp(EXP1, VAL, ENV).
eval_ter(ternary(LOG, ?, _, :, EXP2), VAL, ENV) :-
    eval_log(LOG, false, ENV),
    eval_exp(EXP2, VAL, ENV).

/* EVALUATE LOGICAL EXPRESSION
?- eval_log(logical(not, bool('True')), R, []).
R = false .
?- eval_log(logical(not, bool('False')), R, []).
R = true .
?- eval_log(logical(not, compare(variable(x), ==, string('Hello, W0rld!'))), R, [(x, 'Hello')]).
R = true .
?- eval_log(logical(variable(x), and, variable(y)), R, [(x, true), (y, true)]).
R = true .
?- eval_log(logical(variable(x), and, variable(y)), R, [(x, true), (y, false)]).
R = false .
?- eval_log(logical(variable(x), and, variable(y)), R, [(x, false), (y, true)]).
R = false .
?- eval_log(logical(variable(x), or, variable(y)), R, [(x, false), (y, false)]).
R = false .
?- eval_log(logical(variable(x), or, variable(y)), R, [(x, false), (y, true)]).
R = true .
?- eval_log(logical(variable(x), or, variable(y)), R, [(x, true), (y, false)]).
R = true .
*/
eval_log(logical(not, CMP), true, ENV) :- eval_cmp(CMP, false, ENV).
eval_log(logical(not, CMP), false, ENV) :- eval_cmp(CMP, true, ENV).

eval_log(logical(CMP1, and, CMP2), true, ENV) :-
    eval_cmp(CMP1, true, ENV),
    eval_cmp(CMP2, true, ENV).
eval_log(logical(CMP1, and, _), false, ENV) :-
    eval_cmp(CMP1, false, ENV).
eval_log(logical(CMP1, and, CMP2), false, ENV) :-
    eval_cmp(CMP1, true, ENV),
    eval_cmp(CMP2, false, ENV).

eval_log(logical(CMP1, or, CMP2), false, ENV) :-
    eval_cmp(CMP1, false, ENV),
    eval_cmp(CMP2, false, ENV).
eval_log(logical(CMP1, or, _), true, ENV) :- eval_cmp(CMP1, true, ENV).
eval_log(logical(CMP1, or, CMP2), true, ENV) :-
    eval_cmp(CMP1, false, ENV),
    eval_cmp(CMP2, true, ENV).

eval_log(CMP, VAL, ENV) :- eval_cmp(CMP, VAL, ENV).

/* EVALUATE COMPARISON EXPRESSION
?- eval_cmp(compare(variable(x), ==, string('Hello, W0rld!')), R, [(x, 'Hello, W0rld!')]).
R = true .
?- eval_cmp(compare(variable(x), ==, string('Hello, W0rld!')), R, [(x, 'Hello')]).
R = false .
?- eval_cmp(compare(variable(x), ==, string('Hello, W0rld!')), R, [(x, 0)]).
R = false .
?- eval_cmp(compare(variable(x), '!=', string('Hello, W0rld!')), R, [(x, 'Hello, W0rld!')]).
R = false .
?- eval_cmp(compare(variable(x), '!=', string('Hello, W0rld!')), R, [(x, 'Hello')]).
R = true .
?- eval_cmp(compare(variable(x), '!=', string('Hello, W0rld!')), R, [(x, 0)]).
R = true .
?- eval_cmp(compare(bool('True'), ==, bool('False')), R, []).
R = false.
?- eval_cmp(bool('True'), R, []).
R = true .
?- eval_cmp(bool('False'), R, []).
R = false .
?- eval_cmp(variable(x), R, [(x, true)]).
R = true .
?- eval_cmp(variable(x), R, [(x, false)]).
R = false .
?- eval_cmp(compare(number(10), <, variable(x)), R, [(x, 20)]).
R = true .
?- eval_cmp(compare(number(10), <, variable(x)), R, [(x, 2)]).
R = false .
?- eval_cmp(compare(number(10), >, variable(x)), R, [(x, 20)]).
R = false .
?- eval_cmp(compare(number(10), >, variable(x)), R, [(x, 2)]).
R = true .
?- eval_cmp(compare(number(10), >, arithmetic(variable(x), *, number(3))), R, [(x, 3)]).
R = true .
?- eval_cmp(compare(number(10), >, arithmetic(variable(x), *, number(3))), R, [(x, 4)]).
R = false .
?- eval_cmp(compare(arithmetic(variable(x), *, parentheses('(', arithmetic(number(3), +, variable(y)), ')')), ==, number(0)), R, [(x, 0), (y, -1)]).
R = true .
?- eval_cmp(compare(arithmetic(variable(x), *, parentheses('(', arithmetic(number(3), +, variable(y)), ')')), ==, number(0)), R, [(x, 2), (y, -3)]).
R = true .
*/
eval_cmp(compare(EXP1, <, EXP2), true, ENV) :-
    eval_exp(EXP1, VAL1, ENV),
    eval_exp(EXP2, VAL2, ENV),
    VAL1 < VAL2.
eval_cmp(compare(EXP1, <, EXP2), false, ENV) :-
    eval_exp(EXP1, VAL1, ENV),
    eval_exp(EXP2, VAL2, ENV),
    VAL1 >= VAL2.

eval_cmp(compare(EXP1, >, EXP2), true, ENV) :-
    eval_exp(EXP1, VAL1, ENV),
    eval_exp(EXP2, VAL2, ENV),
    VAL1 > VAL2.
eval_cmp(compare(EXP1, >, EXP2), false, ENV) :-
    eval_exp(EXP1, VAL1, ENV),
    eval_exp(EXP2, VAL2, ENV),
    VAL1 =< VAL2.

eval_cmp(compare(EXP1, '!=', EXP2), true, ENV) :- eval_cmp(compare(EXP1, '==', EXP2), false, ENV).
eval_cmp(compare(EXP1, '!=', EXP2), false, ENV) :- eval_cmp(compare(EXP1, '==', EXP2), true, ENV).

eval_cmp(compare(EXP1, '==', EXP2), true, ENV) :-
    eval_exp(EXP1, VAL1, ENV),
    eval_exp(EXP2, VAL2, ENV),
    VAL1 = VAL2.
eval_cmp(compare(EXP1, '==', EXP2), false, ENV) :-
    eval_exp(EXP1, VAL1, ENV),
    eval_exp(EXP2, VAL2, ENV),
    VAL1 \= VAL2.

eval_cmp(BOOL, VAL, _) :- eval_bool(BOOL, VAL).
eval_cmp(ID, true, ENV) :- eval_id(ID, VAR), env_lookup(VAR, ENV, true).
eval_cmp(ID, false, ENV) :- eval_id(ID, VAR), env_lookup(VAR, ENV, false).

/* EVALUATE EXPRESSION
P = arithmetic(variable(x), *, parentheses('(', arithmetic(variable(z), +, number(-, 3)), ')')) .
*/
/* EVALUATE EXPRESSION
?- eval_exp(arithmetic(variable(x), -, arithmetic(number(3), +, variable(y))), R, [(x, 1), (y, -2)]).
R = 0 .
?- eval_exp(arithmetic(arithmetic(variable(x), *, number(3)), +, variable(y)), R, [(x, 1), (y, -2)]).
R = 1 .
?- eval_exp(arithmetic(variable(x), *, arithmetic(number(3), /, variable(y))), R, [(x, 10), (y, 3)]).
R = 10 .
?- eval_exp(arithmetic(parentheses('(', arithmetic(variable(x), -, number(3)), ')'), +, variable(y)), R, [(x, 10), (y, 3)]).
R = 10 .
?- eval_exp(arithmetic(variable(x), *, parentheses('(', arithmetic(number(-, 3), +, variable(y)), ')')), R, [(x, 10), (y, 3)]).
R = 0 .
?- eval_exp(arithmetic(variable(x), /, parentheses('(', arithmetic(variable(z), +, number(-, 3)), ')')), R, [(x, 10), (z, 3)]).
division by 0 is undefined.
false.

?- eval_exp(arithmetic(variable(x), +, number(3)), R, [(x, 3)]).
R = 6 .
?- eval_exp(arithmetic(number(-, 3), -, variable(x)), R, [(x, 3)]).
R = -6 .
?- eval_exp(arithmetic(variable(x), *, number(3)), R, [(x, 3)]).
R = 9 .
?- eval_exp(arithmetic(number(-, 3), /, variable(x)), R, [(x, 3)]).
R = -1 .
?- eval_exp(arithmetic(number(-, 3), /, variable(x)), R, [(x, 0)]).
division by 0 is undefined.
false.

?- eval_exp(parentheses('(', variable(x), ')'), VAL, [(x, 10)]).
VAL = 10 .
?- eval_exp(parentheses('(', number(69), ')'), VAL, []).
VAL = 69 .

?- eval_exp(variable(x), R, [(x, 10)]).
R = 10 .
?- eval_exp(string('Hello, W0rld!'), R, []).
R = 'Hello, W0rld!' .
?- eval_exp(number(69), N, []).
N = 69.
?- eval_exp(number(-, 69), N, []).
N = -69.
?- eval_exp(bool('True'), R, []).
R = true.
*/
eval_exp(arithmetic(EXP1, +, EXP2), VAL, ENV) :-
    eval_exp(EXP1, VAL1, ENV),
    eval_exp(EXP2, VAL2, ENV),
    VAL is VAL1 + VAL2.
eval_exp(arithmetic(EXP1, -, EXP2), VAL, ENV) :-
    eval_exp(EXP1, VAL1, ENV),
    eval_exp(EXP2, VAL2, ENV),
    VAL is VAL1 - VAL2.
eval_exp(EXP, VAL, ENV) :- eval_term(EXP, VAL, ENV).
eval_exp(STR, VAL, _) :- eval_str(STR, VAL).
eval_exp(BOOL, VAL, _) :- eval_bool(BOOL, VAL).

eval_term(arithmetic(EXP1, *, EXP2), VAL, ENV) :-
    eval_exp(EXP1, VAL1, ENV),
    eval_exp(EXP2, VAL2, ENV),
    VAL is VAL1 * VAL2.
eval_term(arithmetic(_, /, EXP), _, ENV) :-
    eval_exp(EXP, VAL, ENV),
    VAL = 0,
    write('division by 0 is undefined.'),
    fail.
eval_term(arithmetic(EXP1, /, EXP2), VAL, ENV) :-
    eval_exp(EXP1, VAL1, ENV),
    eval_exp(EXP2, VAL2, ENV),
    VAL2 \= 0,
    VAL is VAL1 / VAL2.
eval_term(EXP, VAL, ENV) :- eval_factor(EXP, VAL, ENV).

eval_factor(parentheses('(', EXP, ')'), VAL, ENV) :- eval_exp(EXP, VAL, ENV).
eval_factor(ID, VAL, ENV) :- eval_id(ID, VAR), env_lookup(VAR, ENV, VAL).
eval_factor(NUM, VAL, _) :- eval_num(NUM, VAL).

/* EVALUATE IDENTIFIER
?- eval_id(variable(saanp), ID).
ID = saanp.

?- eval_id(variable(saanp_hiss), ID).
ID = saanp_hiss.
*/
eval_id(variable(ID), ID).

/* EVALUATE STRING
?- eval_str(string('Hello'), S).
S = 'Hello'.

?- eval_str(string('Hello, W0rld!'), S).
S = 'Hello, W0rld!'.
*/
eval_str(string(S), S).

/* EVALUATE NUMBER
?- eval_num(number(69), N).
N = 69.

?- eval_num(number(-, 69), N).
N = -69.
*/
eval_num(number(N), N).
eval_num(number(-, M), N) :- N is M * -1.

/* EVALUATE BOOLEAN
?- eval_bool(bool('True'), X).
X = true.

?- eval_bool(bool('False'), X).
X = false.
*/
eval_bool(bool('True'), true).
eval_bool(bool('False'), false).
